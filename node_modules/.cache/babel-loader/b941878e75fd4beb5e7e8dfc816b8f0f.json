{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar URI_AVAILABLE = 'URI_AVAILABLE';\n\nvar UserRejectedRequestError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(UserRejectedRequestError, _Error);\n\n  function UserRejectedRequestError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.name = _this.constructor.name;\n    _this.message = 'The user rejected the request.';\n    return _this;\n  }\n\n  return UserRejectedRequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction getSupportedChains(_ref) {\n  var supportedChainIds = _ref.supportedChainIds,\n      rpc = _ref.rpc;\n\n  if (supportedChainIds) {\n    return supportedChainIds;\n  }\n\n  return rpc ? Object.keys(rpc).map(function (k) {\n    return Number(k);\n  }) : undefined;\n}\n\nvar WalletConnectConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(WalletConnectConnector, _AbstractConnector);\n\n  function WalletConnectConnector(config) {\n    var _this2;\n\n    _this2 = _AbstractConnector.call(this, {\n      supportedChainIds: getSupportedChains(config)\n    }) || this;\n    _this2.config = config;\n    _this2.handleChainChanged = _this2.handleChainChanged.bind(_assertThisInitialized(_this2));\n    _this2.handleAccountsChanged = _this2.handleAccountsChanged.bind(_assertThisInitialized(_this2));\n    _this2.handleDisconnect = _this2.handleDisconnect.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  var _proto = WalletConnectConnector.prototype;\n\n  _proto.handleChainChanged = function handleChainChanged(chainId) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n\n    this.emitUpdate({\n      chainId: chainId\n    });\n  };\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  _proto.handleDisconnect = function handleDisconnect() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'disconnect' event\");\n    } // we have to do this because of a @walletconnect/web3-provider bug\n\n\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);\n      this.walletConnectProvider = undefined;\n    }\n\n    this.emitDeactivate();\n  };\n\n  _proto.activate = function activate() {\n    try {\n      var _this4 = this;\n\n      var _temp5 = function _temp5() {\n        function _temp2() {\n          var account;\n          return Promise.resolve(new Promise(function (resolve, reject) {\n            var userReject = function userReject() {\n              // Erase the provider manually\n              _this4.walletConnectProvider = undefined;\n              reject(new UserRejectedRequestError());\n            }; // Workaround to bubble up the error when user reject the connection\n\n\n            _this4.walletConnectProvider.connector.on('disconnect', function () {\n              // Check provider has not been enabled to prevent this event callback from being called in the future\n              if (!account) {\n                userReject();\n              }\n            });\n\n            _this4.walletConnectProvider.enable().then(function (accounts) {\n              return resolve(accounts[0]);\n            })[\"catch\"](function (error) {\n              // TODO ideally this would be a better check\n              if (error.message === 'User closed modal') {\n                userReject();\n                return;\n              }\n\n              reject(error);\n            });\n          })[\"catch\"](function (err) {\n            throw err;\n          })).then(function (_Promise$catch) {\n            account = _Promise$catch;\n\n            _this4.walletConnectProvider.on('disconnect', _this4.handleDisconnect);\n\n            _this4.walletConnectProvider.on('chainChanged', _this4.handleChainChanged);\n\n            _this4.walletConnectProvider.on('accountsChanged', _this4.handleAccountsChanged);\n\n            return {\n              provider: _this4.walletConnectProvider,\n              account: account\n            };\n          });\n        }\n\n        var _temp = function () {\n          if (!_this4.walletConnectProvider.connector.connected) {\n            return Promise.resolve(_this4.walletConnectProvider.connector.createSession(_this4.config.chainId ? {\n              chainId: _this4.config.chainId\n            } : undefined)).then(function () {\n              _this4.emit(URI_AVAILABLE, _this4.walletConnectProvider.connector.uri);\n            });\n          }\n        }(); // ensure that the uri is going to be available, and emit an event if there's a new uri\n\n\n        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);\n      };\n\n      var _temp6 = function () {\n        if (!_this4.walletConnectProvider) {\n          return Promise.resolve(import('@walletconnect/ethereum-provider').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (WalletConnectProvider) {\n            _this4.walletConnectProvider = new WalletConnectProvider(_this4.config);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(_temp5) : _temp5(_temp6));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this6 = this;\n\n      return Promise.resolve(_this6.walletConnectProvider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this8 = this;\n\n      return Promise.resolve(_this8.walletConnectProvider.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this10 = this;\n\n      return Promise.resolve(_this10.walletConnectProvider.accounts).then(function (accounts) {\n        return accounts[0];\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect);\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);\n      this.walletConnectProvider.disconnect();\n    }\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this12 = this;\n\n      _this12.emitDeactivate();\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return WalletConnectConnector;\n}(AbstractConnector);\n\nexport { URI_AVAILABLE, UserRejectedRequestError, WalletConnectConnector };","map":{"version":3,"mappings":"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","names":["URI_AVAILABLE","UserRejectedRequestError","_inheritsLoose","_this","name","constructor","message","Error","getSupportedChains","supportedChainIds","rpc","Object","keys","map","Number","k","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","console","log","emitUpdate","accounts","account","walletConnectProvider","removeListener","emitDeactivate","activate","Promise","resolve","reject","userReject","_this4","connector","on","enable","then","error","err","provider","connected","createSession","emit","uri","m","WalletConnectProvider","getProvider","_this6","getChainId","_this8","getAccount","_this10","deactivate","disconnect","close","_this12","AbstractConnector"],"sources":["/root/dex/frontend/node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import WalletConnectProvider from '@walletconnect/ethereum-provider'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  public walletConnectProvider?: WalletConnectProvider\n  private readonly config: WalletConnectConnectorArguments\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.connector.connected) {\n      await this.walletConnectProvider.connector.createSession(\n        this.config.chainId ? { chainId: this.config.chainId } : undefined\n      )\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.connector.uri)\n    }\n\n    let account: string\n    account = await new Promise<string>((resolve, reject) => {\n      const userReject = () => {\n        // Erase the provider manually\n        this.walletConnectProvider = undefined\n        reject(new UserRejectedRequestError())\n      }\n\n      // Workaround to bubble up the error when user reject the connection\n      this.walletConnectProvider!.connector.on('disconnect', () => {\n        // Check provider has not been enabled to prevent this event callback from being called in the future\n        if (!account) {\n          userReject()\n        }\n      })\n\n      this.walletConnectProvider!.enable()\n        .then((accounts: string[]) => resolve(accounts[0]))\n        .catch((error: Error): void => {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            userReject()\n            return\n          }\n          reject(error)\n        })\n    }).catch(err => {\n      throw err\n    })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider!.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider!.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}